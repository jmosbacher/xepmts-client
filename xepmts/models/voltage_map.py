# coding: utf-8

"""
    PMT API

    API for the XenonnT PMT database  # noqa: E501

    The version of the OpenAPI document: 0.1
    Contact: joe.mosbacher@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from xepmts.configuration import Configuration


class VoltageMap(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'experiment': 'str',
        'detector': 'str',
        'voltages': 'list[VoltageMapVoltages]',
        'created_by': 'str',
        'comments': 'str',
        'date': 'str',
        'id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'experiment': 'experiment',
        'detector': 'detector',
        'voltages': 'voltages',
        'created_by': 'created_by',
        'comments': 'comments',
        'date': 'date',
        'id': '_id'
    }

    def __init__(self, name=None, experiment=None, detector=None, voltages=None, created_by=None, comments=None, date=None, id=None, local_vars_configuration=None):  # noqa: E501
        """VoltageMap - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._experiment = None
        self._detector = None
        self._voltages = None
        self._created_by = None
        self._comments = None
        self._date = None
        self._id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if experiment is not None:
            self.experiment = experiment
        if detector is not None:
            self.detector = detector
        if voltages is not None:
            self.voltages = voltages
        if created_by is not None:
            self.created_by = created_by
        if comments is not None:
            self.comments = comments
        if date is not None:
            self.date = date
        if id is not None:
            self.id = id

    @property
    def name(self):
        """Gets the name of this VoltageMap.  # noqa: E501


        :return: The name of this VoltageMap.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VoltageMap.


        :param name: The name of this VoltageMap.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def experiment(self):
        """Gets the experiment of this VoltageMap.  # noqa: E501


        :return: The experiment of this VoltageMap.  # noqa: E501
        :rtype: str
        """
        return self._experiment

    @experiment.setter
    def experiment(self, experiment):
        """Sets the experiment of this VoltageMap.


        :param experiment: The experiment of this VoltageMap.  # noqa: E501
        :type: str
        """
        allowed_values = ["xenon1t", "xenonnt", "unknown"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and experiment not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `experiment` ({0}), must be one of {1}"  # noqa: E501
                .format(experiment, allowed_values)
            )

        self._experiment = experiment

    @property
    def detector(self):
        """Gets the detector of this VoltageMap.  # noqa: E501


        :return: The detector of this VoltageMap.  # noqa: E501
        :rtype: str
        """
        return self._detector

    @detector.setter
    def detector(self, detector):
        """Sets the detector of this VoltageMap.


        :param detector: The detector of this VoltageMap.  # noqa: E501
        :type: str
        """
        allowed_values = ["tpc", "nveto", "muveto", "unknown"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and detector not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `detector` ({0}), must be one of {1}"  # noqa: E501
                .format(detector, allowed_values)
            )

        self._detector = detector

    @property
    def voltages(self):
        """Gets the voltages of this VoltageMap.  # noqa: E501


        :return: The voltages of this VoltageMap.  # noqa: E501
        :rtype: list[VoltageMapVoltages]
        """
        return self._voltages

    @voltages.setter
    def voltages(self, voltages):
        """Sets the voltages of this VoltageMap.


        :param voltages: The voltages of this VoltageMap.  # noqa: E501
        :type: list[VoltageMapVoltages]
        """

        self._voltages = voltages

    @property
    def created_by(self):
        """Gets the created_by of this VoltageMap.  # noqa: E501


        :return: The created_by of this VoltageMap.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this VoltageMap.


        :param created_by: The created_by of this VoltageMap.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def comments(self):
        """Gets the comments of this VoltageMap.  # noqa: E501


        :return: The comments of this VoltageMap.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this VoltageMap.


        :param comments: The comments of this VoltageMap.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def date(self):
        """Gets the date of this VoltageMap.  # noqa: E501


        :return: The date of this VoltageMap.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this VoltageMap.


        :param date: The date of this VoltageMap.  # noqa: E501
        :type: str
        """

        self._date = date

    @property
    def id(self):
        """Gets the id of this VoltageMap.  # noqa: E501


        :return: The id of this VoltageMap.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VoltageMap.


        :param id: The id of this VoltageMap.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VoltageMap):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VoltageMap):
            return True

        return self.to_dict() != other.to_dict()
